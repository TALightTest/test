%YAML 1.2
---
public_folder: public
services:
  check_one_sol:
    description: this service checks whether an input string correctly encodes a tiling of a corridor with "[]" and "[--]" tiles.
    evaluator: [python, services/check_one_sol_driver.py]
    args:
      input_formula:
        regex:  ^(\[|\]|-){0,1000}$
        example: "[][][--][]"
      silent:
        explain: if nothing is wrong with your input string then the service runs silently; otherwise it explains what is the problem in clear.
        regex: ^(0|1)$
        default: 0
      n:
        explain: set this to require that the corridor length must be a precise value (the tiles "[]" and "[--]" take length 1 and 2, respectively).
        regex: ^(free|0|[1-9][0-9]{0,1000})$
        default: free
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_num_sol:
    description: call this service to check that the number of different tilings with "[]" and "[--]" tiles of a corridor of length <n> is what you think.
    evaluator: [python, services/check_num_sol_driver.py]
    args:
      n:
        regex: ^(0|[1-9][0-9]{0,1000})$
        explain: use to specify the length of the corridor  
      risp:
        regex: ^(0|[1-9][0-9]{0,100000})$
        explain: use to specify your conjectured answer for the number of tilings of a corridor of length <n>.  
      ok_if_congruent_modulus:
        explain: when n grows the number of solutions gets huge. Set this argument to 0 if you are ready to deal with arbitrarily large numbers. Otherwise, computing the number modulo <ok_if_congruent_modulus> will suffice in assessing you got the right ideas.  
        regex: ^(0|[1-9][0-9]{0,10})$
        default: 0
#        default: 1000000007
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      silent:
        explain: the service runs silently unless your conjectured answer is wrong (or for wrong calls).
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_num_sol:
    evaluator: [python, services/eval_num_sol_driver.py]
    args:
      answ_modulus:
        explain: when n grows the number of solutions gets huge. Set this argument to 0 if you are ready to deal with arbitrarily large numbers. Otherwise, computing the number modulo <answ_modulus> will suffice in assessing you got the right ideas.
        regex: ^([1-9][0-9]{0,10}|0)$
#        default: 0
        default: 1000000007
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
        regex: ^(python|java|nodejs|compiled)$
        default: python
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_sol_set:
    evaluator: [python, services/check_sol_set_driver.py]
    args:
      feedback:
        regex: ^(yes_no|dispell_longest_seen_prefix_of_a_missing_sol|tell_minimal_missing_prefix|give_a_missing_sol|tell_a_missing_prefix_of_len_[1-9][0-9]{0,10})$
        default: yes_no
        explain: the options are as follows
        explain1: -yes_no= just tell me if I am missing one solution.
        explain2: -dispell_longest_seen_prefix_of_a_missing_sol= please, of one solution I am missing, give me the longest prefix it has in common with a solution I have given.
        explain3: -tell_minimal_missing_prefix= please, of one solution I am missing, give me a long enough prefix so that if I complete it to a feasible solution I get a new one.
        explain4: -give_a_missing_sol= just spoil me out a solution I have missed.
        explain5: -tell_a_missing_prefix_of_len_?= please, of one solution I am missing, give me the prefix of the specified length (the number put in place of ?).
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_sol_list:
    evaluator: [python, services/check_sol_list_driver.py]
    args:
      sorting_criterion:
        regex: ^(loves_short_tiles|loves_long_tiles)$
        default: loves_short_tiles
      feedback:
        regex: ^(yes_no|dispell_first_missing_longest_seen_prefix|spot_first_wrong_consec|tell_first_minimal_missing_prefix|give_first_missing|tell_prefix_of_missing_len_[1-9][0-9]{0,10})$
        default: yes_no
        explain: the options are as follows
        explain1: -yes_no= just tell me if I am missing one solution.
        explain2: -dispell_first_missing_longest_seen_prefix= please, of one solution I am missing, give me the longest prefix it has in common with a solution I have given.
        explain3: -spot_first_wrong_consec= please, point me out two solutions I have placed consecutive whereas at least one missing solutions sits betwen them.
        explain4: -tell_first_minimal_missing_prefix= please, of one solution I am missing, give me a long enough prefix so that if I complete it to a feasible solution I get a new one.
        explain5: -give_first_missing= just spoil me out a solution I have missed.
        explain6: -tell_prefix_of_missing_len_<len>= please, of one solution I am missing, give me the prefix of length <len>.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_sol_list:
    evaluator: [python, services/eval_sol_list_driver.py]
    args:
      sorting_criterion:
        regex: ^(loves_short_tiles|loves_long_tiles)$
        default: loves_short_tiles
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_next_sol_gen:
    evaluator: [python, services/check_next_sol_gen_driver.py]
    args:
      current_sol:
        regex:  ^(\[|\]|-){0,1000}$
      next_sol:
        regex:  ^(\[|\]|-){0,1000}$
      sorting_criterion:
        regex: ^(loves_short_tiles|loves_long_tiles)$
        default: loves_short_tiles
      tell_maximal_correct_feedback:
        regex: ^(0|1)$
        default: 0
      silent:
        explain: if nothing is wrong then the service runs silently.
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_next:
    evaluator: [python, services/eval_next_driver.py]
    args:
      sorting_criterion:
        regex: ^(loves_short_tiles|loves_long_tiles)$
        default: loves_short_tiles
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user)
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_rank_of_sol:
    evaluator: [python, services/check_rank_of_sol_driver.py]
    args:
      n:
        regex: ^(0|[1-9][0-9]{0,50})$
      sorting_criterion:
        regex: ^(loves_short_tiles|loves_long_tiles)$
        default: loves_short_tiles
      more_or_less_hint_if_wrong:
        regex: ^(0|1)$
        default: 0
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  check_unrank:
    evaluator: [python, services/check_unrank_driver.py]
    args:
      n:
        regex: ^(0|[1-9][0-9]{0,50})$
      sorting_criterion:
        regex: ^(loves_short_tiles|loves_long_tiles)$
        default: loves_short_tiles
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_rank:
    evaluator: [python, services/eval_rank_driver.py]
    args:
      sorting_criterion:
        regex: ^(loves_short_tiles|loves_long_tiles)$
        default: loves_short_tiles
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  eval_unrank:
    evaluator: [python, services/eval_unrank_driver.py]
    args:
      sorting_criterion:
        regex: ^(loves_short_tiles|loves_long_tiles)$
        default: loves_short_tiles
      goal:
        explain: set your goal (efficient includes also correct).
        regex: ^(correct|efficient)$
        default: correct
      seed:
        regex: ^(random_seed|[1-9][0-9]{5,5})$
        default: random_seed
        explain: specify the numeric code to reproduce the very same set of instances as in a previous run. Called with seed=random_seed, the service chooses its seed at random (and communicates it to the user).
      code_lang: 
        regex: ^(python|java|nodejs|compiled)$
        default: python
        explain: the more we know about your bot the better we can estimate the efficiency of your algorithm and your approach to provide our best hints.
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
  synopsis:
    evaluator: [python, services/synopsis/synopsis_driver.py]
    args:
      service:
        regex: ^((\S)+)$
        default: synopsis
        explain: any string without space characters but meant to specify one of the services of the problem %(problem)s
      lang:
        regex: ^(hardcoded|hardcoded_ext|en|it)$
        default: it
      metafile:
        regex: ^(main|en|it)$
        default: main
...
